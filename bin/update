#!/usr/bin/env bash
REPOSITORIES=$HOME/Repositories
STABLE_RUBIES="1.8.6 1.8.7 1.9.1 1.9.2 ree rbx jruby maglev ironruby macruby"
EDGE_RUBIES="rbx-head ruby-head ruby-1.8-head jruby-head"
REDMINE=$HOME/redmine
WORKSPACE=$HOME/Workspace

export ARCHFLAGS="-arch x86_64"

function verb() {
  echo $@ >&2
  $@
}

function announce() {
  echo -e "\033[0;32m$(date +%H:%m) \033[1;32m$@\033[m" >&2
}

function update_repository() {
  cd $REPOSITORIES
  if [ -d $1 ]; then
    announce "Updating $1"
    cd $1
    if [ -d .git ]; then git pull
    else if [ -d .svn ]; then svn up
    else if [ -d .hg ]; then hg pull
    else echo "no vcs" >&2; fi; fi
    fi
    cd ..
  fi
}

function cleanup_repositories() {
  for d in $REPOSITORIES/*/; do
    announce "Cleaning up $d"
    GIT_DIR="$d.git" git gc --aggressive
  done
}

function update_repositories() {
  cd $REPOSITORIES
  for d in *; do update_repository $d; done
}

function update_homebrew() {
  announce "Updating homebrew"
  brew update
}

function update_brew() {
  update_homebrew
  update_formulas
}

function update_formulas() {
  for p in $(brew outdated); do
    update_formula $p
  done
}

function update_formula() {
  announce "Updating $1"
  brew install $1
  case $1 in
    mysql)      update_brew_launchd $1 com.mysql.mysqld.plist;;
    postgres)   update_brew_launchd $1 org.postgresql.postgres.plist;;
    memcached)  update_brew_launchd $1 com.danga.memcached.plist;;
    mongodb)    update_brew_launchd $1 org.mongodb.mongod.plist;;
  esac
}

function update_rvm() {
  announce "updating rvm"
  rvm update --head
  rvm reload
}

function update_stable_ruby() {
  rvm use $1 > /dev/null || update_edge_ruby $1
  rvm use default > /dev/null
}

function update_edge_ruby() {
  announce "Updating $1"
  [ $1 = rbx-head ] && rvm uninstall $1
  rvm install $1 -C --with-iconv-dir=$rvm_path/usr -C --cc=clang -C --enable-pthreads
}

function update_gems() {
  announce "Updating gems for $1"
  rvm use $1 > /dev/null
  gem update --system
  gem update --no-verbose --development
  gem update --prerelease --no-verbose --development
  gem uninstall ruby-debug-base -a
  gem install ruby-debug
  rvm use default > /dev/null
}

function update_all_gems() {
  for ruby in $STABLE_RUBIES $EDGE_RUBIES; do
    [ $ruby != ironruby ] && update_gems $ruby
  done
}

function update_rubies() {
  update_rvm
  for ruby in $STABLE_RUBIES; do update_stable_ruby $ruby; done
  for ruby in $EDGE_RUBIES;   do update_edge_ruby   $ruby; done
  update_all_gems
}

function update_brew_launchd() {
  target=$HOME/Library/LaunchAgents/$2
  verb launchctl unload -w $target
  for plist in /usr/local/Cellar/$1/*/$2; do
    cp -v $plist $target
  done
  verb launchctl load -w $target
}

function update_redmine() {
  announce "Merging redmine commits into finnlabs fork"
  cd $REDMINE
  git co master && git pull edavis10 master && git push origin master
  git co 0.9-stable && git pull edavis10 0.9-stable && git push origin 0.9-stable
}

function update_redmine_dev_tools() {
  announce "Updating redmine-dev-tools"
  cd $WORKSPACE/redmine-dev-tools
  git svn rebase
  git push
}

function update_finnlabs() {
  update_redmine
  update_redmine_dev_tools
}

function update() {
  update_setup
  update_repositories
  update_brew
  update_rubies
  #cleanup_repositories
}

function update_all() {
  update
  update_finnlabs
  cleanup_repositories
}

function setup_brew() {
  if [ ! $(which brew) ]; then
    announce "Installing homebrew"
    sudo mkdir /usr/local
    sudo chown -R `whoami` /usr/local
    curl -L http://github.com/mxcl/homebrew/tarball/master | tar xz --strip 1 -C /usr/local
    update_formula install git
    update_formula install pkg-config
    update_formula install readline
  fi
}

function setup_rvm() {
  if [ ! $(which rvm) ]; then
    announce "Installing rvm"
    mkdir -p ~/.rvm/src/ && cd ~/.rvm/src && rm -rf ./rvm/ && git clone --depth 1 git://github.com/wayneeseguin/rvm.git && cd rvm && ./install
    echo 'if [[ -s $rvm_path/scripts/rvm ]] ; then source $rvm_path/scripts/rvm ; fi' >> ~/.bashrc
    source ~/.rvm/scripts/rvm
    rvm package install iconv
  fi
}

function setup_structure() {
  [ $(which libtoolize) ] || ln -s /Developer/usr/bin/glibtoolize /Developer/usr/bin/libtoolize
  mkdir -p $REPOSITORIES $WORKSPACE
}

function update_setup() {
  setup_structure
  setup_brew
  setup_rvm
}

function display_help() {
echo "Examples:
        update                      #   updates everything
        update setup                #   installes homebrew, rvm, git and such if missing
        update repositories         #   updates all repositories
        update repository rails     #   updates rails clone
        update brew                 #   updates homebrew and all outdated formulas
        update formulas             #   updates all outdated formulas
        update formula mysql        #   updates mysql formula + config
        update rubies               #   updates all rubies + gems"
}

if [ $1 ]; then
  case $1 in
    help|usage|--help|-h|-?) display_help;;
    *) update_$@;;
  esac
else
  update
fi
